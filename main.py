import logging
import os
import uuid

from telegram import Update, Poll, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from dotenv import load_dotenv

# Load env and logging
load_dotenv()
logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Moderation store
pending = {}  # mod_id -> (description, option1, option2, user_id)
ADMIN_CHAT = 396948407

# Conversation states
DESCRIPTION, OPTION1, OPTION2 = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
     rules = (
         "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç NEKOIN CHOICE.\n\n"
         "üìù –ü—Ä–∞–≤–∏–ª–∞:\n"
         "  ‚Ä¢ –ù–∞–¥—Å–∏–ª–∞–π –ª–∏—à–µ –∑–∞–∫–æ–Ω–Ω—ñ —Ç–∞ –µ—Ç–∏—á–Ω—ñ –¥–∏–ª–µ–º–∏. –ï–∫—Å—Ç—Ä–µ–º—ñ–∑–º, –º–æ–≤–∞ –≤–æ—Ä–æ–∂–Ω–µ—á—ñ, —Å–µ–∫—Å—É–∞–ª—å–Ω–∏–π —Ç–∞ —à–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.\n"
         "  ‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ —Å–ø–∞–º, —Ä–µ–∫–ª–∞–º—É —Ç–∞ –æ—Å–æ–±–∏—Å—Ç—ñ –æ–±—Ä–∞–∑–∏.\n"
         "  ‚Ä¢ –î–∏–ª–µ–º–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é.\n\n"
         "‚ùóÔ∏è –£—Å—ñ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–∏–π–º–∞—î —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ ‚Äî –±–æ—Ç –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –Ω–∞—Å–ª—ñ–¥–∫–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è. –ú–∏ –Ω–µ –¥–∞—î–º–æ —é—Ä–∏–¥–∏—á–Ω–∏—Ö, —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —á–∏ –º–µ–¥–∏—á–Ω–∏—Ö –ø–æ—Ä–∞–¥.\n\n"
         "–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —Å—É—Ç—å —Ç–≤–æ—î—ó –¥–∏–ª–µ–º–∏:"
     )
     await update.message.reply_text(rules)
     return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text("–û–∫–µ–π, —Ç–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–µ—Ä—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.")
    return OPTION1

async def get_option1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['option1'] = update.message.text
    await update.message.reply_text("–ê —Ç–µ–ø–µ—Ä –¥—Ä—É–≥–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.")
    return OPTION2

async def get_option2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Save second option
    context.user_data['option2'] = update.message.text
    desc = context.user_data['description']
    o1 = context.user_data['option1']
    o2 = context.user_data['option2']

    # Send for moderation
    mod_id = str(uuid.uuid4())
    pending[mod_id] = (desc, o1, o2, update.effective_user.id)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç–∏", callback_data=f"approve#{mod_id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject#{mod_id}"),
    ]])
    await context.bot.send_message(
        chat_id = 396948407,
        text=f"üîé –ù–æ–≤–∞ –¥–∏–ª–µ–º–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó:\n\n‚ùì {desc}\n1Ô∏è‚É£ {o1}\n2Ô∏è‚É£ {o2}",
        reply_markup=kb
    )
    await update.message.reply_text("–î–∏–ª–µ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é, –¥–∞–º –∑–Ω–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚úåÔ∏è")
    return ConversationHandler.END

async def moderate_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, mod_id = query.data.split("#", 1)
    record = pending.pop(mod_id, None)
    if not record:
        return await query.edit_message_text("‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    desc, o1, o2, user_id = record

    if action == "approve":
        await context.bot.send_poll(
            chat_id="@nekoin_choice",
            question=f"üî• {desc}",
            options=[o1, o2],
            is_anonymous=True,
            allows_multiple_answers=False,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–°—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –¥–∏–ª–µ–º—É", url="https://t.me/NEKOINChoiceBot")
            ]])
        )
        await context.bot.send_message(user_id, "üéâ –î–∏–ª–µ–º—É —Å—Ö–≤–∞–ª–µ–Ω–æ –π –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ @nekoin_choice! –ü–æ–¥—ñ–ª–∏—Å—è –Ω–µ—é –∑ –¥—Ä—É–∑—è–º–∏")
        await query.edit_message_text("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ @nekoin_choice")
    else:
        await context.bot.send_message(user_id, "üòï –î–∏–ª–µ–º—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        await query.edit_message_text("‚ùå –î–∏–ª–µ–º—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "NEKOIN CHOICE ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "üìù –ü—Ä–∞–≤–∏–ª–∞:\n"
        "  ‚Ä¢ –ù–∞–¥—Å–∏–ª–∞–π –ª–∏—à–µ –∑–∞–∫–æ–Ω–Ω—ñ —Ç–∞ –µ—Ç–∏—á–Ω—ñ –¥–∏–ª–µ–º–∏. –ï–∫—Å—Ç—Ä–µ–º—ñ–∑–º, –º–æ–≤–∞ –≤–æ—Ä–æ–∂–Ω–µ—á—ñ, —Å–µ–∫—Å—É–∞–ª—å–Ω–∏–π —Ç–∞ —à–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.\n"
        "  ‚Ä¢ –ë–µ–∑ —Å–ø–∞–º—É, —Ä–µ–∫–ª–∞–º–∏ —á–∏ –æ–±—Ä–∞–∑.\n"
        "  ‚Ä¢ –£—Å—ñ –¥–∏–ª–µ–º–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n\n"
        "‚ö†Ô∏è –î–∏—Å–ª–µ–π–º–µ—Ä:\n"
        "  –£—Å—ñ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–∏–π–º–∞—î —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ ‚Äî –±–æ—Ç –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –Ω–∞—Å–ª—ñ–¥–∫–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è. –ú–∏ –Ω–µ –¥–∞—î–º–æ —é—Ä–∏–¥–∏—á–Ω–∏—Ö, —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —á–∏ –º–µ–¥–∏—á–Ω–∏—Ö –ø–æ—Ä–∞–¥.\n\n"
        "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –¥–∏–ª–µ–º—É ‚Äî –≤–∏–∫–æ–Ω–∞–π /start"
    )
    await update.message.reply_text(text)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            OPTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_option1)],
            OPTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_option2)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(moderate_cb, pattern="^(approve|reject)#"))
    app.add_handler(CommandHandler("help", help_command))
    app.run_polling()

if __name__ == "__main__":
    main()

